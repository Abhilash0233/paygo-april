import { supabase } from '../../config/supabaseConfig';
import { Center } from './centerService';

// Define interface for a saved center record
interface SavedCenter {
  id?: string; // Auto-generated by Supabase
  user_id: string;
  center_id: string;
  saved_at?: string; // ISO datetime string
  center_data?: Partial<Center>; // Optional: Store some basic center data for quick access
}

/**
 * Save a center as favorite for a user
 * @param userId The ID of the user
 * @param centerId The ID of the center to save
 * @param centerData Optional basic center data to store with the favorite
 * @returns boolean indicating success or failure
 */
export const saveCenter = async (
  userId: string,
  centerId: string,
  centerData?: Partial<Center>
): Promise<boolean> => {
  try {
    if (!userId || !centerId) {
      console.error('[FavoriteService] User ID and Center ID are required');
      return false;
    }

    console.log(`[FavoriteService] Saving center ${centerId} as favorite for user ${userId}`);

    // Ensure we have at least some data to show in favorites list
    const safeData = centerData || {};
    if (!safeData.id) {
      safeData.id = centerId;
    }

    // Create saved center data
    const savedCenter: SavedCenter = {
      user_id: userId,
      center_id: centerId,
      saved_at: new Date().toISOString(),
      center_data: safeData // Store basic center data for quick access in favorites screen
    };

    // Save to Supabase
    const { data, error } = await supabase
      .from('favorites')
      .insert(savedCenter)
      .select()
      .single();

    if (error) {
      console.error('[FavoriteService] Error saving center as favorite:', error);
      console.error('[FavoriteService] Error details:', JSON.stringify(error));
      return false;
    }

    console.log(`[FavoriteService] Center ${centerId} successfully saved as favorite for user ${userId}`);
    return true;
  } catch (error) {
    console.error('[FavoriteService] Error saving center as favorite:', error);
    // Log more details about the error
    if (error instanceof Error) {
      console.error('[FavoriteService] Error message:', error.message);
      console.error('[FavoriteService] Error stack:', error.stack);
    } else if (typeof error === 'object' && error !== null) {
      console.error('[FavoriteService] Error object:', JSON.stringify(error));
    }
    return false;
  }
};

/**
 * Remove a center from user's favorites
 * @param userId The ID of the user
 * @param centerId The ID of the center to unsave
 * @returns boolean indicating success or failure
 */
export const unsaveCenter = async (
  userId: string,
  centerId: string
): Promise<boolean> => {
  try {
    if (!userId || !centerId) {
      console.error('[FavoriteService] User ID and Center ID are required');
      return false;
    }

    // Delete from Supabase
    const { error } = await supabase
      .from('favorites')
      .delete()
      .eq('user_id', userId)
      .eq('center_id', centerId);

    if (error) {
      console.error('[FavoriteService] Error removing center from favorites:', error);
      return false;
    }

    console.log(`[FavoriteService] Center ${centerId} removed from favorites for user ${userId}`);
    return true;
  } catch (error) {
    console.error('[FavoriteService] Error removing center from favorites:', error);
    return false;
  }
};

/**
 * Check if a center is saved as favorite by a user
 * @param userId The ID of the user
 * @param centerId The ID of the center to check
 * @returns boolean indicating if the center is saved
 */
export const isCenterSaved = async (
  userId: string,
  centerId: string
): Promise<boolean> => {
  try {
    if (!userId || !centerId) {
      return false;
    }

    // Check if the favorite exists in Supabase
    const { data, error } = await supabase
      .from('favorites')
      .select('id')
      .eq('user_id', userId)
      .eq('center_id', centerId)
      .maybeSingle();

    if (error) {
      console.error('[FavoriteService] Error checking if center is saved:', error);
      return false;
    }

    return !!data;
  } catch (error) {
    console.error('[FavoriteService] Error checking if center is saved:', error);
    return false;
  }
};

/**
 * Get all centers saved by a user
 * @param userId The ID of the user
 * @returns Array of saved centers with their basic data
 */
export const getSavedCenters = async (
  userId: string
): Promise<Array<{ id: string; centerData?: Partial<Center> }>> => {
  try {
    console.log(`[FavoriteService] Getting saved centers for user ${userId}`);
    
    if (!userId) {
      console.error('[FavoriteService] No user ID provided');
      return [];
    }

    // Query favorites from Supabase
    const { data, error } = await supabase
      .from('favorites')
      .select('*')
      .eq('user_id', userId);

    if (error) {
      console.error('[FavoriteService] Error getting saved centers:', error);
      return [];
    }

    console.log(`[FavoriteService] Found ${data.length} favorites for user ${userId}`);

    // Map results to an array of center IDs with their data
    const savedCenters = data.map(item => ({
      id: item.center_id,
      centerData: item.center_data
    }));

    console.log(`[FavoriteService] Returning ${savedCenters.length} saved centers`);
    return savedCenters;
  } catch (error) {
    console.error('[FavoriteService] Error getting saved centers:', error);
    return [];
  }
};

/**
 * Toggle saved status for a center
 * @param userId The ID of the user
 * @param centerId The ID of the center
 * @param centerData Optional basic center data to store with the favorite
 * @returns The new saved status (true = saved, false = unsaved)
 */
export const toggleSaveCenter = async (
  userId: string,
  centerId: string,
  centerData?: Partial<Center>
): Promise<boolean> => {
  try {
    console.log(`[FavoriteService] Toggle save center - userId: ${userId}, centerId: ${centerId}`);
    
    if (!userId || !centerId) {
      console.error('[FavoriteService] Missing userId or centerId');
      return false;
    }

    // Check current saved status
    console.log(`[FavoriteService] Checking if center ${centerId} is already saved`);
    const isSaved = await isCenterSaved(userId, centerId);
    console.log(`[FavoriteService] Center is currently saved: ${isSaved}`);

    // Toggle the status
    if (isSaved) {
      console.log(`[FavoriteService] Center is saved, will unsave it`);
      await unsaveCenter(userId, centerId);
      console.log(`[FavoriteService] Center ${centerId} successfully unsaved`);
      return false; // Now unsaved
    } else {
      console.log(`[FavoriteService] Center is not saved, will save it`);
      const success = await saveCenter(userId, centerId, centerData);
      console.log(`[FavoriteService] Center ${centerId} successfully saved: ${success}`);
      return success; // Should be true if save was successful
    }
  } catch (error) {
    console.error('[FavoriteService] Error toggling center saved status:', error);
    // Log more details if it's an error object
    if (error instanceof Error) {
      console.error('[FavoriteService] Error details:', error.message);
    } else if (typeof error === 'object' && error !== null) {
      console.error('[FavoriteService] Error object:', JSON.stringify(error));
    }
    return false;
  }
}; 